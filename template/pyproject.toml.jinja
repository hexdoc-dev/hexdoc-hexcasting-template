[build-system]
requires = [
    "hatchling",
    "hatch-gradle-version>=0.9.8",
]
build-backend = "hatchling.build"

# project metadata

[project]
name = "{{ package_name }}"
description = "{{ mod_description }}"
readme = "doc/README.md"
authors = [
    { name="{{ github_user }}" },
]
keywords = ["hexdoc"]
requires-python = ">=3.12"
dynamic = ["version", "dependencies", "optional-dependencies"]

[project.urls]
Homepage = "{{ pages_url }}"
Source = "{{ source_url }}"

# project version

[tool.hatch.version]
scheme = "gradle"
source = "gradle-properties"
py-path = "doc/src/{{ package_slug }}/__version__.py"
key = "{{ gradle_mod_version_key }}"
{% if minecraft_version_in_mod_version %}
gradle-version-regex = { regex='^(.+?)(-.+)?$', repl='\1.{ {{- gradle_minecraft_version_key -}} }\2' }
{% endif %}

# Python dependencies

# required
[tool.hatch.metadata.hooks.{{ 'version-catalog' if version_catalog else 'gradle-properties' }}]
dependencies = [
    { package="hexdoc-hexcasting", op="~=", py-version="1.0", key="{{ gradle_hex_version_key }}" },
]

# dev-only
[dependency-groups]
dev = [
    "ruff",
]

# directory inclusion

[tool.hatch.build]
only-include = [
    "doc/src/{{ package_slug }}",
    "gradle.properties",
]
artifacts = [
    "/doc/src/{{ package_slug }}/_export/generated",
    "/doc/src/{{ package_slug }}/__gradle_version__.py",
]

[tool.hatch.build.targets.wheel]
sources = ["doc/src"]

# hexdoc entry points

[project.entry-points.hexdoc]
{{ modid }} = "{{ package_slug }}._hooks:{{ classname }}Plugin"

# linting

[tool.pyright]
pythonVersion = "3.12"
pythonPlatform = "All"

include = ["doc/src"]
extraPaths = ["doc/src"]

typeCheckingMode = "standard"

strictDictionaryInference = true
strictListInference = true
strictSetInference = true

reportConstantRedefinition = "error"
reportIncompleteStub = "error"
reportInconsistentConstructor = "error"
reportInvalidStubStatement = "error"

reportDeprecated = "warning"
reportDuplicateImport = "warning"
reportMatchNotExhaustive = "warning"
reportMissingParameterType = "warning"
reportMissingTypeArgument = "warning"
reportMissingTypeStubs = "warning"
reportPrivateUsage = "warning"
reportTypeCommentUsage = "warning"
reportUnknownArgumentType = "warning"
reportUnknownLambdaType = "warning"
reportUnknownMemberType = "warning"
reportUnknownParameterType = "warning"
reportUnknownVariableType = "warning"
reportUnnecessaryCast = "warning"
reportUnnecessaryComparison = "warning"
reportUnnecessaryContains = "warning"
reportUnnecessaryIsInstance = "warning"
reportUntypedBaseClass = "warning"
reportUntypedClassDecorator = "warning"
reportUntypedFunctionDecorator = "warning"
reportUntypedNamedTuple = "warning"
reportUnusedClass = "warning"
reportUnusedExpression = "warning"
reportUnusedFunction = "warning"
reportUnusedImport = "warning"
reportUnusedVariable = "warning"
